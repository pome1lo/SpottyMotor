@page "/login"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<PageTitle>Login</PageTitle>

<div style="max-width: 300px; margin: auto">
    <main class="form-signin w-100 m-auto">
        <h1 class="h3 mb-3 fw-normal">Please sign in</h1>
        <div class="form-floating">
                <input @bind="loginRequest.Email" type="email" class="input-validation-error form-control" id="floatingInput" placeholder="name@example.com" required>
            <label for="floatingInput">Email address</label>
            <div class="valid-feedback">Все хорошо!</div>
            <div class="invalid-feedback">Пожалуйста, предоставьте действующий почтовый индекс.</div>
        </div>
        <div class="form-floating">
            <input @bind="loginRequest.Password" type="password" class="input-validation-error form-control" id="floatingPassword" placeholder="Password" required>
            <label for="floatingPassword">Password</label>
            <div class="valid-feedback">Все хорошо!</div>
            <div class="invalid-feedback">Пожалуйста, предоставьте действующий почтовый индекс.</div>
        </div>
        <div class="form-check d-flex justify-content-between my-3">
            <div>
                <input class="form-check-input" type="checkbox" value="remember-me" id="flexCheckDefault" >
                <label class="form-check-label" for="flexCheckDefault">
                    Remember me
                </label>
            </div> 
        </div>
          
        <button @onclick="Authenticate" class="btn btn-primary w-100 py-2" type="submit">Sign in</button>
        <p class="mt-5 mb-3 text-body-secondary">&copy; 2023</p>
    </main>
</div>
 
@code {
    private AuthenticationRequest loginRequest = new();

    private async Task Authenticate()
    {
        await js.InvokeVoidAsync("alert", "AUTH");

        var loginResponse = await httpClient.PostAsJsonAsync<AuthenticationRequest>("/api/Account/Login", loginRequest);
 
        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<AuthenticationResponse>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            
            navManager.NavigateTo("/", true);
        }
        else if (loginResponse.StatusCode == HttpStatusCode.Unauthorized)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
    }
}